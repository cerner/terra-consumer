// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Popup should render a pop with title,close button and content 1`] = `
<Popup
  attachmentBehavior="auto"
  boundingRef={null}
  classNameArrow={null}
  classNameContent={null}
  classNameOverlay={null}
  contentAttachment="middle center"
  contentHeight="auto"
  contentWidth="320"
  isArrowDisplayed={false}
  isContentFocusDisabled={false}
  isHeaderDisabled={true}
  isOpen={false}
  onRequestClose={[MockFunction]}
  targetRef={[MockFunction]}
>
  <div>
    <Spacer
      className="popup-title"
      isInlineBlock={false}
      marginBottom="none"
      marginLeft="none"
      marginRight="none"
      marginTop="none"
      paddingBottom="small-1"
      paddingLeft="large+1"
      paddingRight="small"
      paddingTop="small-1"
    >
      <Arrange
        fill={
          <SafeHtml
            text="Title"
          />
        }
        fitEnd={
          <Button
            className="close-button"
            icon={
              <IconClose
                data-name="Layer 1"
                viewBox="0 0 48 48"
                xmlns="http://www.w3.org/2000/svg"
              />
            }
            isBlock={false}
            isCompact={false}
            isDisabled={false}
            isIconOnly={false}
            isReversed={false}
            onClick={[MockFunction]}
            refCallback={undefined}
            text="Close Popup"
            type="button"
            variant="utility"
          />
        }
      />
    </Spacer>
    <div>
      <div>
         This is a test content
      </div>
    </div>
  </div>
</Popup>
`;

exports[`Popup should render a popup without header(title & close button) 1`] = `
<Popup
  attachmentBehavior="auto"
  boundingRef={null}
  classNameArrow={null}
  classNameContent={null}
  classNameOverlay={null}
  contentAttachment="middle center"
  contentHeight="auto"
  contentWidth="320"
  isArrowDisplayed={false}
  isContentFocusDisabled={false}
  isHeaderDisabled={true}
  isOpen={false}
  onRequestClose={[MockFunction]}
  targetRef={[MockFunction]}
>
  <div>
    <div>
      <div>
         This is a test content
      </div>
    </div>
  </div>
</Popup>
`;
